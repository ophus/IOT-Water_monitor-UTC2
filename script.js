async function getData() {
    try {
        const response = await fetch("https://esp32-data-receiver.phucminh9395.workers.dev/", {
            method: "GET", // ƒê·ªïi th√†nh GET n·∫øu API kh√¥ng c·∫ßn POST
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json" // ƒê·∫£m b·∫£o server ph·∫£n h·ªìi JSON
            },
            mode: "cors", // K√≠ch ho·∫°t CORS
            cache: "no-cache" // Tr√°nh cache d·ªØ li·ªáu c≈©
        });

        if (!response.ok) throw new Error(HTTP error! Status: ${response.status});

        let data;
        try {
            data = await response.json();
        } catch (jsonError) {
            throw new Error("L·ªói khi ph√¢n t√≠ch JSON: " + jsonError.message);
        }

        console.log("üì• Received data:", data);

        // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá tr∆∞·ªõc khi c·∫≠p nh·∫≠t UI
        if (data && typeof data === "object") {
            updateElement("tempValue", ${data.temperature || "N/A"} ¬∞C);
            updateElement("phValue", ${data.ph || "N/A"});
            updateElement("tdsValue", ${data.tds || "N/A"} PPM);
            updateElement("turbidityValue", ${data.turbidity || "N/A"} NTU);
        } else {
            console.warn("‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:", data);
        }
    } catch (error) {
        console.error("‚ùå Fetch error:", error);
    }
}

// H√†m c·∫≠p nh·∫≠t ph·∫ßn t·ª≠ an to√†n
function updateElement(id, value) {
    const el = document.getElementById(id);
    if (el) {
        el.innerText = value;
    } else {
        console.warn(‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠: ${id});
    }
}

// L·∫•y d·ªØ li·ªáu m·ªói 5 gi√¢y
setInterval(getData, 5000);
