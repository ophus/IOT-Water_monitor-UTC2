#include <WiFiManager.h>
#include <WebServer.h>
#include <HTTPClient.h>
#include <Preferences.h>
#include <ArduinoJson.h>
#include <WebServer.h>
#include <Preferences.h>
#include <math.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#include "DFRobot_PH.h"
#include <EEPROM.h>

#define UPDATE_INTERVAL 600000 // 10 ph√∫t
#define POLL_INTERVAL 10000    // 10 gi√¢y
#define DATA_SEND_INTERVAL 5000  // Send data every 5 seconds

#define LED_PIN 2   
#define PH_PIN 34   
#define TEMP_PIN 32 
#define TDS_PIN 33  
#define TUR_PIN 35  
#define RELAY_PIN1 4
#define RELAY_PIN2 5

#define VREF 3.3         
#define SCOUNT 15        
#define BETA 3950  
#define SERIES_RESISTOR 10000  
#define K_VALUE 1.0 * (900) 
#define CONVERSION_FACTOR 0.5

const float U0 = 3600.0;

Preferences preferences;

DFRobot_PH ph;
OneWire oneWire(TEMP_PIN);
DallasTemperature sensors(&oneWire);

int analogBuffer[SCOUNT];
int analogBufferIndex = 0;
float voltage = 0, tdsValue = 0;

WebServer server(80);
String workerUrl = "https://esp32-data-receiver.phucminh9395.workers.dev";
unsigned long lastUpdateTime = 0;
unsigned long lastPollTime = 0;
unsigned long lastDataSendTime = 0;
bool sendDataEnabled = false;
bool continuousMeasurement = false;
#define HEARTBEAT_INTERVAL 5000 // 5 gi√¢y
unsigned long lastHeartbeatTime = 0;
void sendIPToWorker() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(workerUrl + "/update_ip");
        http.addHeader("Content-Type", "application/json");
        String jsonPayload = "{\"ip\":\"" + WiFi.localIP().toString() + "\"}";
        Serial.println("üì§ G·ª≠i IP l√™n Worker: " + jsonPayload);
        int httpResponseCode = http.POST(jsonPayload);
        Serial.print("üì§ M√£ ph·∫£n h·ªìi: ");
        Serial.println(httpResponseCode);
        http.end();
    }
}

// void handleTestSensor() {
//     float temperature = sensors.getTempCByIndex(0);
//     int phRaw = analogRead(PH_PIN);
//     float phVoltage = (phRaw / 4095.0) * 5000;
//     float phValue = ph.readPH(phVoltage, temperature);
//     int tdsRaw = analogRead(TDS_PIN);
//     float voltage = (tdsRaw / 4095.0) * VREF;
//     float tdsValue = 973 * voltage / (1.0 + 0.02 * (temperature - 25));
//     int turRaw = analogRead(TUR_PIN);
//     float turbidity = convertTurbidity(turRaw);
// }

void checkAndUpdateIP() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå M·∫•t k·∫øt n·ªëi WiFi! Th·ª≠ k·∫øt n·ªëi l·∫°i...");
        WiFi.reconnect();
        delay(5000);
        if (WiFi.status() != WL_CONNECTED) {
            Serial.println("üö® WiFi v·∫´n kh√¥ng k·∫øt n·ªëi, kh·ªüi ƒë·ªông l·∫°i ESP32!");
            ESP.restart();
        }
    } else if (millis() - lastUpdateTime > UPDATE_INTERVAL) {
        sendIPToWorker();
        lastUpdateTime = millis();
    }
}

float convertTurbidity(int analogValue) {
    float Um = (analogValue / 4095.0) * 5000;
    float f = Um / U0;
    return (f >= 0.98 && f <= 1.000) ? 0 : map(f * 100, 0, 100, 1000, 0);
}

int getMedianNum(int bArray[], int iFilterLen) {
    int bTab[iFilterLen];
    for (byte i = 0; i < iFilterLen; i++)
        bTab[i] = bArray[i];
    int i, j, bTemp;
    for (j = 0; j < iFilterLen - 1; j++) {
        for (i = 0; i < iFilterLen - j - 1; i++) {
            if (bTab[i] > bTab[i + 1]) {
                bTemp = bTab[i];
                bTab[i] = bTab[i + 1];
                bTab[i + 1] = bTemp;
            }
        }
    }
    return (iFilterLen & 1) > 0 ? bTab[(iFilterLen - 1) / 2] : (bTab[iFilterLen / 2] + bTab[iFilterLen / 2 - 1]) / 2;
}

String getSensorData() {
    sensors.requestTemperatures();
    float temperature = sensors.getTempCByIndex(0);

    analogBuffer[analogBufferIndex] = analogRead(TDS_PIN);
    analogBufferIndex = (analogBufferIndex + 1) % SCOUNT;
    int filteredADC = getMedianNum(analogBuffer, SCOUNT);
    voltage = (filteredADC / 4095.0) * VREF;
    // float tdsRaw = 973 * voltage;
    // tdsValue = tdsRaw / (1.0 + 0.02 * (temperature - 25));

    int phRaw = analogRead(PH_PIN);
    float phVoltage = (phRaw / 4095.0) * 5000;
    float phValue = ph.readPH(phVoltage, temperature);
    int tdsRaw = analogRead(TDS_PIN);
    float tdsVoltage = (tdsRaw / 4095.0) * VREF;
    float tdsValue = 973 * tdsVoltage / (1.0 + 0.02 * (temperature - 25));
    int turRaw = analogRead(TUR_PIN);
    float turbidity = convertTurbidity(turRaw);
    DynamicJsonDocument doc(512);
    doc["temperature"] = temperature;
    doc["ph"] = phValue;
    doc["tds"] = tdsValue;
    doc["turbidity"] = turbidity;
    String json;
    serializeJson(doc, json);
    return json;
}

void sendSensorDataToWorker() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(workerUrl + "/push_data");
        http.addHeader("Content-Type", "application/json");
        String jsonPayload = getSensorData();
        Serial.println("üì§ G·ª≠i d·ªØ li·ªáu c·∫£m bi·∫øn: " + jsonPayload);
        int httpResponseCode = http.POST(jsonPayload);
        Serial.print("üì§ M√£ ph·∫£n h·ªìi: ");
        Serial.println(httpResponseCode);
        if (httpResponseCode == HTTP_CODE_OK) {
            String response = http.getString();
            Serial.print("üì§ Ph·∫£n h·ªìi: ");
            Serial.println(response);
        } else {
            Serial.print("‚ùå L·ªói g·ª≠i d·ªØ li·ªáu, m√£: ");
            Serial.println(httpResponseCode);
        }
        http.end();
    } else {
        Serial.println("‚ùå WiFi kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i d·ªØ li·ªáu!");
    }
}

void pollForCommands() {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ thƒÉm d√≤ l·ªánh!");
        return;
    }
    
    Serial.println("üì• ƒêang thƒÉm d√≤ l·ªánh...");
    HTTPClient http;
    http.begin(workerUrl + "/poll_command");
    http.addHeader("Content-Type", "application/json");
    int httpResponseCode = http.POST("{}");
    Serial.print("üì• M√£ ph·∫£n h·ªìi: ");
    Serial.println(httpResponseCode); 
    if (httpResponseCode == HTTP_CODE_OK) {
        String response = http.getString();
        Serial.print("üì• D·ªØ li·ªáu JSON th√¥: ");
        Serial.println(response);
        
        // Ki·ªÉm tra xem response c√≥ r·ªóng ho·∫∑c kh√¥ng ph·∫£i JSON kh√¥ng
        if (response.length() == 0 || response.equals("{}") || response.equals("[]")) {
            Serial.println("üì• Kh√¥ng c√≥ l·ªánh m·ªõi.");
            http.end();
            return;
        }
        
        DynamicJsonDocument doc(512); // TƒÉng k√≠ch th∆∞·ªõc buffer
        DeserializationError error = deserializeJson(doc, response);
        
        if (!error) {
            // Ki·ªÉm tra xem JSON c√≥ ch·ª©a c√°c ch·ªØ s·ªë l√† key kh√¥ng (format t·ª´ worker)
            if (doc.containsKey("0")) {
                // X√¢y d·ª±ng l·∫°i l·ªánh t·ª´ c√°c k√Ω t·ª± ri√™ng l·∫ª
                String action = "";
                int index = 0;
                char indexStr[3];
                while (true) {
                    sprintf(indexStr, "%d", index);
                    if (!doc.containsKey(indexStr)) break;
                    action += doc[indexStr].as<String>();
                    index++;
                }
                
                Serial.print("‚úÖ ƒê√£ t·∫°o l·∫°i l·ªánh t·ª´ c√°c k√Ω t·ª± ri√™ng l·∫ª: ");
                Serial.println(action);
                
                if (action.length() > 0) {
                    String result = executeCommand(action);
                    sendCommandResult(action, result);
                }
            }
            // V·∫´n gi·ªØ l·∫°i ki·ªÉm tra action c≈© n·∫øu format thay ƒë·ªïi trong t∆∞∆°ng lai
            else if (doc.containsKey("action")) {
                String action = doc["action"].as<String>();
                Serial.print("‚úÖ Th·ª±c thi l·ªánh: ");
                Serial.println(action);
                String result = executeCommand(action);
                sendCommandResult(action, result);
            } else {
                Serial.println("‚ùå JSON kh√¥ng theo ƒë·ªãnh d·∫°ng mong ƒë·ª£i!");
            }
        } else {
            Serial.print("‚ùå L·ªói ph√¢n t√≠ch JSON: ");
            Serial.println(error.c_str());
        }
    } else {
        Serial.println("‚ùå Kh√¥ng th·ªÉ thƒÉm d√≤ l·ªánh.");
    }
    http.end();
}

String executeCommand(String action) {
    if (action == "measure") {
        continuousMeasurement = true;
        Serial.println("‚úÖ Continuous measurement enabled");
        return "Measurement started";
    } else if (action == "test") {
        // Single measurement
        sendSensorDataToWorker();
        Serial.println("‚úÖ Single test measurement sent");
        return "Test measurement completed";
    } else if (action == "stop") {
        continuousMeasurement = false;
        Serial.println("‚èπÔ∏è Measurement stopped");
        return "Measurement stopped";
    } else if (action == "restart") {
        Serial.println("üîÑ ƒêang kh·ªüi ƒë·ªông l·∫°i ESP32...");
        delay(1000);
        ESP.restart();
        return "Restarting device";
    } else if (action == "status") {
        String status = "WiFi: " + String(WiFi.RSSI()) + " dBm, IP: " + WiFi.localIP().toString();
        return status;
    }
    return "Unknown command: " + action;
}

void sendCommandResult(String action, String result) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå WiFi kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ g·ª≠i k·∫øt qu·∫£!");
        return;
    }
    
    HTTPClient http;
    http.begin(workerUrl + "/command_result");
    http.addHeader("Content-Type", "application/json");
    
    DynamicJsonDocument doc(512);
    doc["action"] = action;
    doc["result"] = result;
    String json;
    serializeJson(doc, json);
    
    Serial.println("üì§ G·ª≠i k·∫øt qu·∫£ l·ªánh: " + json);
    int httpResponseCode = http.POST(json);
    Serial.print("üì§ M√£ ph·∫£n h·ªìi: ");
    Serial.println(httpResponseCode);
    http.end();
}

void handleCommand() {
    if (server.hasArg("plain")) {
        String requestBody = server.arg("plain");
        Serial.println("üì• L·ªánh nh·∫≠n ƒë∆∞·ª£c: " + requestBody);
        
        DynamicJsonDocument doc(512);
        DeserializationError error = deserializeJson(doc, requestBody);
        
        if (error) {
            Serial.print("‚ùå L·ªói ph√¢n t√≠ch JSON t·ª´ y√™u c·∫ßu web: ");
            Serial.println(error.c_str());
            server.send(400, "application/json", "{\"error\": \"Invalid JSON: " + String(error.c_str()) + "\"}");
            return;
        }
        
        if (!doc.containsKey("action")) {
            server.send(400, "application/json", "{\"error\": \"Missing 'action' field\"}");
            return;
        }
        
        String action = doc["action"].as<String>();
        String result = executeCommand(action);
        server.send(200, "application/json", "{\"message\": \"" + result + "\"}");
    } else {
        server.send(400, "application/json", "{\"error\": \"No command received\"}");
    }
}



void setup() {
    Serial.begin(115200);
    Serial.println("\n\n=== ESP32 Water Monitoring System ===");
    
    // K·∫øt n·ªëi WiFi
    WiFiManager wifiManager;
    wifiManager.setConfigPortalTimeout(180); // timeout sau 3 ph√∫t
    
    if (!wifiManager.autoConnect("ESP32_Water_Monitor", "12345678")) {
        Serial.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WiFi. Kh·ªüi ƒë·ªông l·∫°i...");
        delay(3000);
        ESP.restart();
    }
    
    Serial.println("‚úÖ K·∫øt n·ªëi WiFi th√†nh c√¥ng!");
    Serial.print("IP: ");
    Serial.println(WiFi.localIP());
    
    // Thi·∫øt l·∫≠p c√°c route cho webserver

    server.on("/command", HTTP_POST, handleCommand);
    server.begin();
    Serial.println("‚úÖ M√°y ch·ªß web ƒë√£ kh·ªüi ƒë·ªông");
    
    // G·ª≠i IP hi·ªán t·∫°i l√™n worker
    sendIPToWorker();
}
void sendHeartbeat() {
    if (WiFi.status() == WL_CONNECTED) {
        HTTPClient http;
        http.begin(workerUrl + "/heartbeat");
        http.addHeader("Content-Type", "application/json");
        int httpResponseCode = http.POST("{}");
        Serial.print("üíì Heartbeat sent, response code: ");
        Serial.println(httpResponseCode);
        http.end();
    }
}
void loop() {
    server.handleClient();
    checkAndUpdateIP();
    
    // G·ª≠i heartbeat ƒë·ªãnh k·ª≥
    if (millis() - lastHeartbeatTime > HEARTBEAT_INTERVAL) {
        sendHeartbeat();
        lastHeartbeatTime = millis();
    }
    
    // Ph·∫ßn c√≤n l·∫°i c·ªßa m√£ kh√¥ng thay ƒë·ªïi...
    if (millis() - lastPollTime > POLL_INTERVAL) {
        pollForCommands();
        lastPollTime = millis();
    }
    
    if (continuousMeasurement && millis() - lastDataSendTime > DATA_SEND_INTERVAL) {
        sendSensorDataToWorker();
        lastDataSendTime = millis();
    }
}
